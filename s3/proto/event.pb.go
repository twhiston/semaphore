// Code generated by protoc-gen-go. DO NOT EDIT.
// source: event.proto

package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

//
type EventID struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EventID) Reset()         { *m = EventID{} }
func (m *EventID) String() string { return proto.CompactTextString(m) }
func (*EventID) ProtoMessage()    {}
func (*EventID) Descriptor() ([]byte, []int) {
	return fileDescriptor_event_8a31893a1da7040b, []int{0}
}
func (m *EventID) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EventID.Unmarshal(m, b)
}
func (m *EventID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EventID.Marshal(b, m, deterministic)
}
func (dst *EventID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventID.Merge(dst, src)
}
func (m *EventID) XXX_Size() int {
	return xxx_messageInfo_EventID.Size(m)
}
func (m *EventID) XXX_DiscardUnknown() {
	xxx_messageInfo_EventID.DiscardUnknown(m)
}

var xxx_messageInfo_EventID proto.InternalMessageInfo

func (m *EventID) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// An Event
type Event struct {
	ProjectID            int32    `protobuf:"varint,1,opt,name=ProjectID" json:"ProjectID,omitempty"`
	ObjectID             int32    `protobuf:"varint,2,opt,name=ObjectID" json:"ObjectID,omitempty"`
	ObjectType           string   `protobuf:"bytes,3,opt,name=ObjectType" json:"ObjectType,omitempty"`
	Description          string   `protobuf:"bytes,4,opt,name=Description" json:"Description,omitempty"`
	Created              int32    `protobuf:"varint,5,opt,name=Created" json:"Created,omitempty"`
	ObjectName           string   `protobuf:"bytes,6,opt,name=ObjectName" json:"ObjectName,omitempty"`
	ProjectName          string   `protobuf:"bytes,7,opt,name=ProjectName" json:"ProjectName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Event) Reset()         { *m = Event{} }
func (m *Event) String() string { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()    {}
func (*Event) Descriptor() ([]byte, []int) {
	return fileDescriptor_event_8a31893a1da7040b, []int{1}
}
func (m *Event) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Event.Unmarshal(m, b)
}
func (m *Event) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Event.Marshal(b, m, deterministic)
}
func (dst *Event) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Event.Merge(dst, src)
}
func (m *Event) XXX_Size() int {
	return xxx_messageInfo_Event.Size(m)
}
func (m *Event) XXX_DiscardUnknown() {
	xxx_messageInfo_Event.DiscardUnknown(m)
}

var xxx_messageInfo_Event proto.InternalMessageInfo

func (m *Event) GetProjectID() int32 {
	if m != nil {
		return m.ProjectID
	}
	return 0
}

func (m *Event) GetObjectID() int32 {
	if m != nil {
		return m.ObjectID
	}
	return 0
}

func (m *Event) GetObjectType() string {
	if m != nil {
		return m.ObjectType
	}
	return ""
}

func (m *Event) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Event) GetCreated() int32 {
	if m != nil {
		return m.Created
	}
	return 0
}

func (m *Event) GetObjectName() string {
	if m != nil {
		return m.ObjectName
	}
	return ""
}

func (m *Event) GetProjectName() string {
	if m != nil {
		return m.ProjectName
	}
	return ""
}

func init() {
	proto.RegisterType((*EventID)(nil), "api.EventID")
	proto.RegisterType((*Event)(nil), "api.Event")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// EventHandlerClient is the client API for EventHandler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EventHandlerClient interface {
	GetEvent(ctx context.Context, in *EventID, opts ...grpc.CallOption) (*Event, error)
	PostEvent(ctx context.Context, in *Event, opts ...grpc.CallOption) (*EventID, error)
}

type eventHandlerClient struct {
	cc *grpc.ClientConn
}

func NewEventHandlerClient(cc *grpc.ClientConn) EventHandlerClient {
	return &eventHandlerClient{cc}
}

func (c *eventHandlerClient) GetEvent(ctx context.Context, in *EventID, opts ...grpc.CallOption) (*Event, error) {
	out := new(Event)
	err := c.cc.Invoke(ctx, "/api.EventHandler/GetEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventHandlerClient) PostEvent(ctx context.Context, in *Event, opts ...grpc.CallOption) (*EventID, error) {
	out := new(EventID)
	err := c.cc.Invoke(ctx, "/api.EventHandler/PostEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EventHandlerServer is the server API for EventHandler service.
type EventHandlerServer interface {
	GetEvent(context.Context, *EventID) (*Event, error)
	PostEvent(context.Context, *Event) (*EventID, error)
}

func RegisterEventHandlerServer(s *grpc.Server, srv EventHandlerServer) {
	s.RegisterService(&_EventHandler_serviceDesc, srv)
}

func _EventHandler_GetEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventHandlerServer).GetEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.EventHandler/GetEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventHandlerServer).GetEvent(ctx, req.(*EventID))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventHandler_PostEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Event)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventHandlerServer).PostEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.EventHandler/PostEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventHandlerServer).PostEvent(ctx, req.(*Event))
	}
	return interceptor(ctx, in, info, handler)
}

var _EventHandler_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.EventHandler",
	HandlerType: (*EventHandlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetEvent",
			Handler:    _EventHandler_GetEvent_Handler,
		},
		{
			MethodName: "PostEvent",
			Handler:    _EventHandler_PostEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "event.proto",
}

func init() { proto.RegisterFile("event.proto", fileDescriptor_event_8a31893a1da7040b) }

var fileDescriptor_event_8a31893a1da7040b = []byte{
	// 281 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x90, 0x3f, 0x4e, 0xfb, 0x30,
	0x14, 0xc7, 0x7f, 0x49, 0x7f, 0x69, 0x92, 0xd7, 0xc2, 0x60, 0x16, 0x13, 0x55, 0xa8, 0xf2, 0x02,
	0x62, 0x48, 0x04, 0x4c, 0xb0, 0x12, 0x04, 0x5d, 0xa0, 0xaa, 0xb8, 0x80, 0x9b, 0x3c, 0x15, 0xa3,
	0x62, 0x5b, 0x8e, 0x55, 0x89, 0x95, 0x2b, 0x70, 0x34, 0x0e, 0xc0, 0xc2, 0x41, 0x50, 0x9c, 0x40,
	0xcc, 0xe6, 0xef, 0x1f, 0x7f, 0xf4, 0xde, 0x83, 0x09, 0xee, 0x50, 0xda, 0x5c, 0x1b, 0x65, 0x15,
	0x19, 0x71, 0x2d, 0xb2, 0xd9, 0x46, 0xa9, 0xcd, 0x16, 0x0b, 0xae, 0x45, 0xc1, 0xa5, 0x54, 0x96,
	0x5b, 0xa1, 0x64, 0xd3, 0x55, 0xd8, 0x21, 0xc4, 0x37, 0xed, 0x8f, 0x45, 0x49, 0xf6, 0x21, 0x14,
	0x35, 0x0d, 0xe6, 0xc1, 0x49, 0xba, 0x0a, 0x45, 0xcd, 0x3e, 0x03, 0x88, 0x5c, 0x46, 0x66, 0x90,
	0x2e, 0x8d, 0x7a, 0xc6, 0xca, 0x2e, 0x4a, 0x57, 0x88, 0x56, 0x83, 0x41, 0x32, 0x48, 0x1e, 0xd6,
	0x7d, 0x18, 0xba, 0xf0, 0x57, 0x93, 0x23, 0x80, 0xee, 0xfd, 0xf8, 0xaa, 0x91, 0x8e, 0x1c, 0xdb,
	0x73, 0xc8, 0x1c, 0x26, 0x25, 0x36, 0x95, 0x11, 0xba, 0x1d, 0x8a, 0xfe, 0x77, 0x05, 0xdf, 0x22,
	0x14, 0xe2, 0x6b, 0x83, 0xdc, 0x62, 0x4d, 0x23, 0x07, 0xff, 0x91, 0x03, 0xfb, 0x9e, 0xbf, 0x20,
	0x1d, 0xfb, 0xec, 0xd6, 0x69, 0xd9, 0xfd, 0x90, 0xae, 0x10, 0x77, 0x6c, 0xcf, 0x3a, 0x37, 0x30,
	0x75, 0x0b, 0xde, 0x71, 0x59, 0x6f, 0xd1, 0x90, 0x4b, 0x48, 0x6e, 0xd1, 0x76, 0x3b, 0x4f, 0x73,
	0xae, 0x45, 0xde, 0xdf, 0x26, 0x83, 0x41, 0xb1, 0x83, 0xb7, 0x8f, 0xaf, 0xf7, 0x70, 0x8f, 0x25,
	0xc5, 0xee, 0xac, 0xc0, 0xea, 0x49, 0x5d, 0x05, 0xa7, 0xe4, 0x18, 0xd2, 0xa5, 0x6a, 0xfa, 0xbf,
	0x5e, 0x3b, 0xfb, 0xc3, 0x61, 0xff, 0xd6, 0x63, 0x77, 0xf7, 0x8b, 0xef, 0x00, 0x00, 0x00, 0xff,
	0xff, 0xb2, 0x7d, 0xbc, 0x01, 0xa9, 0x01, 0x00, 0x00,
}
